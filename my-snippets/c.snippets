
# main()
snippet mainn
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet main
	int main(void)
	{
		${1}
		return 0;
	}
# #include <...>
snippet include
	#include <${1:stdio}.h>${2}
# #include "..."
snippet header
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet Def
	#ifndef $1
		#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet def
	#define ${1}
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet If
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
		#define $1
	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1})
	{
		${2}
	}
snippet else
	else
	{
		${1}
	}
# Ternary conditional
snippet tern
	(${1}) ? ${2:a} : ${3:b};
# switch
snippet switch
	switch (${1})
	{
		case ${2}:
			${3}
		break;${4}
	}
snippet case
	case ${1}:
		${2}
	break;${3}
# Do While Loop
snippet do
	do
	{
		${2}
	} while (${1});
# While Loop
snippet while
	while (${1})
	{
		${2}
	}
# For Loop
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++})
	{
		${4}
	}
# Function
snippet function
	${1:void} ${2:function_name}(${3:void})
	{
		${4}
	}
# Function Declaration
snippet proto
	${1:void} ${2:function_name}(${3});${4}
# Typedef
snippet typedef
	typedef ${1:int} ${2:MyCustomType};${3}
# Struct
snippet struct
	struct ${1:`Filename('$1_t', 'name')`} {
		${2}
	}${3: /* optional variable list */};${4}
# Typedef struct
snippet tds
	typedef struct ${2:$1 }{
		${3}
	} ${1:`Filename('$1_t', 'name')`};
# Typdef enum
snippet enum
	typedef enum {
		${1}
	} ${2:foo};
# printf
# unfortunately version this isn't as nice as TextMates's, given the lack of a
# dynamic `...`
snippet print
	printf("${1:%s}\n"${2});${3}
# fprintf (again, this isn't as nice as TextMate's version, but it works)
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
